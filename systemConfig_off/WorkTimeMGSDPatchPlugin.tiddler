/***
WorkTimeMGSDPatchPlugin
A few changes I have made to make my life easier.
group References by Area or Project.  There are still some bugs to work out.  This is used for WikiTab to re-introduce some wiki features I miss.
Update short hand fields variables for Quick Add function
***/
//{{{

Tiddler.prototype.sort_orderSlice = function() {
	var orderSlice = store.getTiddlerSlice(this.title,"order");
	return "" + orderSlice + this.title;
}

Tiddler.prototype.sort_prioritySlice = function() {
	var orderSlice = store.getTiddlerSlice(this.title,"priority");
	return "" + orderSlice + this.title;
}

Array.prototype.formatAreaOrProject = function(t) {
		var projectT = t.getParent("Project");
		if(projectT != ""){
			return projectT;
		}else{
			var areaT = t.getParent("Area");
			if(areaT != ""){
				return areaT;
			}else{
				return store.getTiddler("(No Project)");
			}
		}
 	}

//TODO I should really find a way to seperate my changes with this giant important method!
config.macros.mgtdList.refresh = function(place) {

			removeChildren(place);

			var title = place.getAttribute("title");
			var startTag = place.getAttribute("startTag");
			var tagMode = place.getAttribute("tagMode");
			var tagExpr = place.getAttribute("tagExpr");
			var groupBy = place.getAttribute("groupBy");
			var groupCountOnly = place.getAttribute("groupCountOnly");
			var gTagExpr = place.getAttribute("gTagExpr");
			var whereExpr = place.getAttribute("whereExpr");
			var gWhereExpr = place.getAttribute("gWhereExpr");
			var sortBy = place.getAttribute("sortBy");
			var gSortBy = place.getAttribute("gSortBy");
			var viewType = place.getAttribute("viewType");
			var gViewType = place.getAttribute("gViewType");
			var ignoreRealm = place.getAttribute("ignoreRealm");
			var leftoverTitle = place.getAttribute("leftoverTitle");
			var newButton = place.getAttribute("newButton");
			var newButtonTags = place.getAttribute("newButtonTags");
			var tiddlerTitle = place.getAttribute("tiddlerTitle");
			var dontShowEmpty = place.getAttribute("dontShowEmpty");

			var wikifyThis = "";

			wikifyThis += "{{mgtdList{\n";

            if (title != "")
			    wikifyThis += "!"+title

			var nbTags;
			if (newButtonTags != '') {
				nbTags = [
						newButtonTags,                                  // the tags specified in the macro params
						'[['+config.macros.mgtdList.getRealm(tiddlerTitle)+']]',    // the realm. always want a realm
						(tagMode=='global'?'':'[['+tiddlerTitle+']]')   // if not global, then the add tiddler we're in, new here style
					].join(' ');


				var nbList = nbTags.readBracketedList();

				var nbExtra = nbTags;

				// also we want an area. another hack. darn you subprojects.. :)
				if (nbList.contains('Project') && !nbList.containsAny(fastTagged('Area').toTitleList())) {
					var foo = store.fetchTiddler(tiddlerTitle).getByIndex('Area');
					if (foo.length > 0) {
						nbExtra += ' [[' + foo[0] + ']]';
					}
				}

				if (nbList.contains('Project') && !nbList.containsAny(fastTagged('ProjectStatus').toTitleList())) {
					// stupid hack for subprojects list in project dashboards
 					// don't want to create a project with no status
					// this is the hack:
					nbExtra += ' Active';
				}

				// same hack thing for actions
				if (nbList.contains('Action') && !nbList.containsAny(fastTagged('ActionStatus').toTitleList())) {
					nbExtra += ' Next';
				}

				wikifyThis += this.getNewButton(nbExtra);
				// but still use nbTags later on in group headings...

			}


            if (title != "" || newButton != "")
			    wikifyThis += "\n";

			wikifyThis += "{{innerList{\n";

			var checkForContent = wikifyThis;

			var theList = [];
			if (startTag && startTag != 'undefined'/* this sucks */) {
				theList = fastTagged(startTag);
			}
			else {
				// why so hard to get an array of all tiddlers?
				store.forEachTiddler(function(t_title,t_tiddler) { theList.push(t_tiddler); });
			}


			if (tagExpr != "") theList = theList.filterByTagExpr(tagExpr);
			if (whereExpr != "") theList = theList.filterByEval(whereExpr);

			if (ignoreRealm != "yes") {
				var activeRealms = config.macros.mgtdList.getActiveRealms();
				theList = theList.select(function(t) {
					var realm = t.getByIndex("Realm");
					return (
						realm.length == 0 ||  // so something with no realm shows up
						realm.containsAny(activeRealms)
					);
				});
			}

            if (groupBy == "day") {
                // experimental. changing a tag doesn't update modified so
                // this isn't as useful
                theList = theList.groupBy(function(t){return [t.modified.formatString('YYYY-0MM-0DD')];});
				wikifyThis += theList.renderGrouped(viewType,gViewType,leftoverTitle);
            }
			//Start Added by Dossc - detect tickleDate for LandscapeTab
			else if (groupBy == "AreaOrProject") {
	                theList = theList.groupBy(theList.formatAreaOrProject).reverse();
					wikifyThis += theList.renderGrouped(viewType,gViewType,leftoverTitle,null,groupCountOnly,nbTags);
			}
			else if (groupBy == "tickleDate") {
	                theList = theList.groupBy(theList.formatTickleDate).reverse();
					wikifyThis += theList.renderGrouped(viewType,gViewType,leftoverTitle);
			}
			//End Added by Dossc
			else if (groupBy != "") {
				theList = theList.groupByTag(groupBy,sortBy,gSortBy);
				if (gTagExpr != "") theList = theList.filterGroupsByTagExpr(gTagExpr);
				if (gWhereExpr != "") theList = theList.filterGroupsByEval(gWhereExpr);
				wikifyThis += theList.renderGrouped(viewType,gViewType,leftoverTitle,null,groupCountOnly,nbTags);
			}
			else {
				theList = theList.tiddlerSort(sortBy);
				wikifyThis += theList.render(viewType);
			}

			var emptyList = false;
			if (wikifyThis == checkForContent) {
				emptyList = true;
				wikifyThis += "{{none{none}}}";
			}

			wikifyThis += "}}}\n";
			wikifyThis += "}}}\n";

			if (!(dontShowEmpty == "yes" && emptyList))
				wikify(wikifyThis,place,null,tiddler);

		}

//TODO why must shortHand variables exist inside a function.  Why!?!
//TODO shortHand should really read from a Context slice
config.macros.processInbox.handler = function(place,macroName,params,wikifier,paramString,tiddler) {

			var shortHand = {
				Action: {
					'W': 'Waiting For',
					'N': 'Next',
					'F': 'Future',
					'S': 'Starred',
					//Start Added by Dossc - Commonly used Context
					'NE': 'Anywhere',
					'C': 'Computer',
					'A': 'Agenda',
					'LE': 'LowEnergy',
					'Q': 'Quick',
					'L': 'Long',
					//End Addded by Dossc
				},
				Project: {
					'A': 'Active',
					'SM': 'Someday/Maybe',
					'S': 'Starred',
				}
			};

			wikify("Quick add projects and actions (See [[About Quick Add]] for more info):\n",place);
			var pi = createTiddlyElement(place,"textarea",null,"piBox");
			
			wikify("\n",place);

			var a1 = createTiddlyCheckbox(place,"Open created projects",true,null);
			a1.id = 'piShowProjects';

			var a2 = createTiddlyCheckbox(place,"Open created actions",true,null);
			a2.id = 'piShowActions';

			wikify("\n",place);

			var btn = createTiddlyButton(place,"quick add now","create these items",function(e) {
				var lines = pi.value.split("\n");
				var currentProject = "";
				var displayThese = [];

				for (var i=0;i<lines.length;i++) {

					var fields_and_text = lines[i].trim().split(/[|;]{2}/); // anything after || is to become tiddler content
					

					var fields = fields_and_text[0].trim().split(/[|;]/);
					var tiddlerText = fields_and_text[1];


					if (!fields[0] || fields[0].trim() == "") {
						currentProject = "";
					}
					else {

						var title = fields.shift();
						//alert(title);

						// add the realm
						fields.push(config.macros.mgtdList.getRealm());

						if (title.substr(0,1) != '.') {

							//alert("project "+title);

							currentProject = title;

							if (document.getElementById('piShowProjects').checked)
								displayThese.push(title);

							fields.push("Project"); // make it a project
							//fields.push("Active"); // make it active

							if (!fields.containsAny(['SM','A', 'Q']))
								fields.push('A');

							fields = fields.map(function(f) {
								if (shortHand['Project'][f])
									return shortHand['Project'][f];
								else
									return f;
							});

							if (store.tiddlerExists(title))
								alert("Warning: '"+title+"' already exists, did not create");
							else
								store.saveTiddler(
									title,title,
									tiddlerText ? tiddlerText : "", // content
									config.options.txtUserName,
									new Date(),
									fields, // tags
									null // extra fields
								);
						}
						else {
							//alert("action "+title);

							// default to next actions
							if (!fields.containsAny(['N','F','W']))
								fields.push('N');

							fields = fields.map(function(f) {
								if (shortHand['Action'][f])
									return shortHand['Action'][f];
								else
									return f;
							});

							//alert("action "+title);
							title = title.trim();
							title = title.replace(/^\.+/,'');

							// If the action is already existing
							// let's presume that we want to create it as a unique action.
							// Use some code from NewMeansNewPlugin.
							if (config.macros.newTiddler.getName)
								title = config.macros.newTiddler.getName(title);

							if (document.getElementById('piShowActions').checked)
								displayThese.push(title);

							fields.push("Action"); // make it an action 
							if (currentProject.trim() != "")
								fields.push(currentProject); // make it in this project

							// these should be configurable
							var automagicContexts = {
								'Call':'call',
								'Errand':'buy'
							};
							for (amc in automagicContexts) {
								var checkExists = store.fetchTiddler(amc);
								var startString = automagicContexts[amc];
								if (title.substr(0,startString.length).toLowerCase() == startString && checkExists && checkExists.hasTag('Context')) {
									fields.push(amc);
								}
							}

							if (store.tiddlerExists(title))
								alert("Warning: '"+title+" already exists, did not create");
							else
								store.saveTiddler(
									title,title,
									tiddlerText ? tiddlerText : "", // content
									config.options.txtUserName,
									new Date(),
									fields, // tags
									null // extra fields
								);
						}
					}
				}

				for (var ii=0;ii<displayThese.length;ii++)
					story.displayTiddler("bottom",displayThese[ii]);

				displayMessage("Quick add items created");

				// Clear the quick add text area and close the slider. (jQuery anyone?)
				jQuery(pi).val('');
				jQuery(pi).closest('.sliderPanel').hide();

				return false;
			}); // end of createTiddlyButton

			// A button to clear the textarea
			createTiddlyButton(place,"clear","Clear text",function(){ jQuery(pi).val(''); });

			// A button to close the slider
			createTiddlyButton(place,"close","Close Quick Add",function(){ jQuery(pi).closest('.sliderPanel').hide(); });

		}

//}}}
