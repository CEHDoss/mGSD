/***
PeriodicBackupsPlugin
I like LessBackupsPlugin, but browser security updates have been makeing it harder to get it to work.  So, I wrote something like it, not as good, that stores all the fields locally on the Wiki.  I use it in conjunction with TiddlyFox.
***/
//{{{
config.periodicBackups = {
	currentPeriodIndex: 0,

	backupPeriods: [
		['FullYear', 0],
		['Month', 0],
		['Date', 0],
		['Day', 0],
		['Hours', 0],
		['Minutes', 0]
	],
	
	loadData: function(){
		store.getTiddler('PeriodicBackupsPlugin').fields.data.split('\n').forEach(function(element, index){
			config.periodicBackups.backupPeriods[index] = element.split(':');
		});
	},
	
	saveData: function(){
		var text = '';
		this.backupPeriods.forEach(function (element) {
			text += element[0] +':'+ element[1]+'\n';
		});
		var plugin = store.getTiddler('PeriodicBackupsPlugin').fields.data = text.trim();
		config.periodicBackups.loadData();
	},
	
	//TODO: combine this with loadData; not sure why I made this separate.
	findNextPeriod: function(){
		var now = new Date();
		for (var i=0;i<this.backupPeriods.length;i++) {
			method = 'get'+this.backupPeriods[i][0];
			var nowM = now[method]();
			if(nowM != this.backupPeriods[i][1]){
				this.backupPeriods[i][1] = nowM;
				this.currentPeriodIndex = i;
				break;
			}
		}
	},
	
	saveMain: function (localPath,original,posDiv) {
		try{
			config.periodicBackups.loadData();
		}catch(e){
			console.log(e.message);
		}
		try{
			config.periodicBackups.findNextPeriod();
			config.periodicBackups.saveData();
			config.periodicBackups.saveMain_orig(localPath,original,posDiv);
		}catch(e){
			console.log(e.message);
		}
	},
	
	getBackupPath: function (localPath,title,extension){
		var backupPath = config.periodicBackups.getBackupPath_orig(localPath,title,extension);
		try{
			//config.periodicBackups.loadData();
			var currentPeriod = config.periodicBackups.backupPeriods[config.periodicBackups.currentPeriodIndex];
			return backupPath.replace(/(\.)([0-9]+\.[0-9]+)(\.html)$/,'$1'+currentPeriod[0]+currentPeriod[1]+'$3');
		}catch(e){
			console.log(e.message);
		}
		return backupPath;
	}
}

config.periodicBackups.saveMain_orig = window.saveMain;
window.saveMain = config.periodicBackups.saveMain;

config.periodicBackups.getBackupPath_orig = window.getBackupPath;
if(window.getBackupPath_mptw_orig)config.periodicBackups.getBackupPath_orig = window.getBackupPath_mptw_orig;
window.getBackupPath = config.periodicBackups.getBackupPath;

//}}}
